using Ace.Adept.Server.Controls;
using Ace.Adept.Server.Motion;
using Ace.Core.Client;
using Ace.Core.Server;
using Ace.Core.Util;
using System;
using System.ComponentModel;
using System.Threading;
using System.Windows.Forms;
using System.Diagnostics;
using System.Text.Json;


namespace OptiSort
{
    /// <summary>
    /// Collects picking coordinates calculated by the openCV library which elaborate the camera image (incoming over MQTT)
    /// Two buttons are used to connect/disconnect from the robot and open the manual commands
    /// </summary>
    public partial class ucScaraTargets : UserControl
    {
        private optisort_mgr _manager;
      
        Thread _thDefineLocation;
        static Thread _thReachLocation;
        bool _stop = false;
        bool _msgReady = false;
        string _msgReceived = string.Empty;
        static bool _robotIsMoving = false;
        private Transform3D _lastTarget = new Transform3D(0, 0, 0, 0, 0, 0);
        private BindingList<Transform3D> _targetQueueList;
        private int _backlog = 0;

        internal ucScaraTargets(optisort_mgr manager)
        {
            InitializeComponent();
            _manager = manager;
        }

        private void ucScara_Load(object sender, EventArgs e)
        {
            // init dgv
            _targetQueueList = new BindingList<Transform3D>();
            dgvTargetQueue.AutoGenerateColumns = false;
            DataGridViewTextBoxColumn xColumn = new DataGridViewTextBoxColumn
            { HeaderText = "DX", DataPropertyName = "DX", Width = 100 };
            DataGridViewTextBoxColumn yColumn = new DataGridViewTextBoxColumn
            { HeaderText = "DY", DataPropertyName = "DY", Width = 100 };
            DataGridViewTextBoxColumn zColumn = new DataGridViewTextBoxColumn
            { HeaderText = "DZ", DataPropertyName = "DZ", Width = 100 };
            DataGridViewTextBoxColumn yawColumn = new DataGridViewTextBoxColumn
            { HeaderText = "Yaw", DataPropertyName = "Yaw", Width = 100 };
            DataGridViewTextBoxColumn pitchColumn = new DataGridViewTextBoxColumn
            { HeaderText = "Pitch", DataPropertyName = "Pitch", Width = 100 };
            DataGridViewTextBoxColumn rollColumn = new DataGridViewTextBoxColumn
            { HeaderText = "Roll", DataPropertyName = "Roll", AutoSizeMode = DataGridViewAutoSizeColumnMode.Fill };

            dgvTargetQueue.Columns.Add(xColumn);
            dgvTargetQueue.Columns.Add(yColumn);
            dgvTargetQueue.Columns.Add(zColumn);
            dgvTargetQueue.Columns.Add(yawColumn);
            dgvTargetQueue.Columns.Add(pitchColumn);
            dgvTargetQueue.Columns.Add(rollColumn);
            dgvTargetQueue.DataSource = _targetQueueList;
            dgvTargetQueue.Rows.Clear();

            // instance and start thread to control robot movement
            _thReachLocation = new Thread(MoveToLoc);
            _thReachLocation.Start();
        }


        public void OnMessageReceived(string topic, JsonElement message)
        {
            // check if message is generated by topic of interest and if robot is connected
            if (topic == Properties.Settings.Default.mqtt_topic_scaraTarget && _manager.StatusScara)
            {
                double x = message.GetProperty("x").GetDouble();
                double y = message.GetProperty("y").GetDouble();
                double z = message.GetProperty("z").GetDouble();
                double yaw = message.GetProperty("rx").GetDouble();
                double pitch = message.GetProperty("ry").GetDouble();
                double roll = message.GetProperty("rz").GetDouble();

                // Define a new target location
                Transform3D row = new Transform3D(x, y, z, yaw, pitch, roll);
                AddLocRow(row);

                _backlog++;
            }
        }

        private void AddLocRow(Transform3D row)
        {
            if (InvokeRequired)
            {
                // Marshal to the UI thread (needed to avoid cross-thread error)
                Invoke(new Action<Transform3D>(AddLocRow), row);
            }
            else
            {
                // Only update the list if it's empty or the row is different from the last target
                if (_targetQueueList.Count == 0 || _lastTarget != row)
                {
                    try
                    {
                        _targetQueueList.Add(row);
                        _lastTarget = row;
                    }
                    catch (Exception ex)
                    {
                        _manager.NonBlockingMessageBox($"Error adding new entry: {ex.Message}", "Error!", MessageBoxIcon.Error);
                    }
                }
            }
        }

        private void RemoveFirstRow()
        {
            if (InvokeRequired)
            {
                // Marshal to the UI thread (needed to avoid cross-thread error)
                Invoke(new Action(RemoveFirstRow));
            }
            else
            {
                try
                {
                    _targetQueueList.RemoveAt(0);
                }
                catch (Exception ex)
                {
                    _manager.NonBlockingMessageBox($"Error removing an entry: " + ex.ToString(), "Error!", MessageBoxIcon.Error);
                }
            }
        }

        private void MoveToLoc()
        {
            int busy = 0;
            while (_stop == false)
            {
                try
                {
                    if (_targetQueueList.Count > 0 && _robotIsMoving == false)
                    {
                        _robotIsMoving = true;
                        if (busy == 0)
                        {
                            Transform3D _locTarget = _targetQueueList[0];

                            Cobra600.Motion.Approach(_manager.Cobra600.Server, _manager.Cobra600.Robot, _locTarget, 20);
                            Cobra600.Motion.CartesianMove(_manager.Cobra600.Server, _manager.Cobra600.Robot, _locTarget, true);
                            Cobra600.Motion.Approach(_manager.Cobra600.Server, _manager.Cobra600.Robot, _locTarget, 20);

                            RemoveFirstRow();

                            busy++;
                        }
                        _robotIsMoving = false;
                    }
                    if (busy > 20)
                        busy = 0;
                    else if (busy > 0)
                        busy++;
                }
                catch (Exception ex)
                {
                    _manager.NonBlockingMessageBox($"Error moving: {ex}", "Error!", MessageBoxIcon.Error);
                    if (ex is System.ObjectDisposedException)
                        break;
                }
                Thread.Sleep(10);
            }
        }

    }
}
